################################################################################
# 85세 이상 FWLS 환자의 CT 진단 유용성 연구 - 완전 통합 실행 스크립트
################################################################################

# 필요한 라이브러리 로드
library(tidyverse)
library(readxl)
library(lubridate)
library(tableone)

# 데이터 경로 설정 (Mac 환경 반영)
data_dir <- "/Users/youjinlee/Library/Mobile Documents/com~apple~CloudDocs/My R/Fever c claude "


################################################################################
# 1. 데이터 구조 확인
################################################################################
check_data_structure <- function() {
  cat("========== 데이터 구조 확인 ==========\n\n")
  base_data  <- read_excel(file.path(data_dir, "base_result_s.xlsx"))
  nurse_data <- read_excel(file.path(data_dir, "nurse_s.xlsx"))
  lab_data   <- read_excel(file.path(data_dir, "fever_lab_s.xlsx"))
  ct_data    <- read_excel(file.path(data_dir, "ct_s.xlsx"))
  
  cat("1. base_result_s.xlsx 컬럼명:\n")
  print(names(base_data))
  cat("\n데이터 크기:", nrow(base_data), "행,", ncol(base_data), "열\n")
  
  if("고혈압" %in% names(base_data)) {
    cat("\n고혈압 고유값:", unique(base_data$고혈압), "\n")
  }
  if("당뇨" %in% names(base_data)) {
    cat("당뇨 고유값:", unique(base_data$당뇨), "\n")
  }
  
  cat("\n----------------------------------------\n")
  
  return(list(base = base_data, nurse = nurse_data, lab = lab_data, ct = ct_data))
}

################################################################################
# 2. 데이터 로드
################################################################################
load_data <- function() {
  cat("데이터 로드 중...\n")
  base_data  <- read_excel(file.path(data_dir, "base_result_s.xlsx"))
  nurse_data <- read_excel(file.path(data_dir, "nurse_s.xlsx"))
  lab_data   <- read_excel(file.path(data_dir, "fever_lab_s.xlsx"))
  ct_data    <- read_excel(file.path(data_dir, "ct_s.xlsx"))
  
  base_data <- base_data %>%
    mutate(
      등록번호  = as.character(등록번호),
      나이     = as.numeric(gsub("[^0-9]", "", as.character(나이))),
      내원일자 = as.character(내원일자),
      성별     = as.factor(성별)
    )
  nurse_data <- nurse_data %>% mutate(등록번호 = as.character(등록번호))
  lab_data   <- lab_data %>% mutate(등록번호 = as.character(등록번호))
  ct_data    <- ct_data %>% mutate(등록번호 = as.character(등록번호))
  
  cat("데이터 로드 완료\n")
  return(list(base = base_data, nurse = nurse_data, lab = lab_data, ct = ct_data))
}

################################################################################
# 3. 데이터 전처리
################################################################################
preprocess_data <- function(data_list) {
  
  base  <- data_list$base
  nurse <- data_list$nurse
  lab   <- data_list$lab
  ct    <- data_list$ct
  
  cat("\n데이터 전처리 시작...\n")
  
  # 85세 이상
  patient_data <- base %>% filter(나이 >= 85)
  cat("85세 이상 환자:", nrow(patient_data), "명\n")
  
  # 기저질환 이진화
  binarize <- function(df, col) {
    if (col %in% names(df)) {
      df[[col]] <- ifelse(df[[col]] %in% c("+", "Y", "1"), 1, 0)
      df[[col]][is.na(df[[col]])] <- 0
    } else {
      df[[col]] <- 0
    }
    df
  }
  
  patient_data <- patient_data %>%
    binarize("고혈압") %>% rename(HTN = 고혈압) %>%
    binarize("당뇨") %>% rename(DM = 당뇨) %>%
    binarize("심질환") %>% rename(Heart_disease = 심질환) %>%
    binarize("신질환") %>% rename(Kidney_disease = 신질환) %>%
    binarize("호흡기질환") %>% rename(Lung_disease = 호흡기질환) %>%
    binarize("뇌혈관질환") %>% rename(CVA = 뇌혈관질환)
  
  if ("Neoplasm" %in% names(patient_data)) {
    patient_data$Malignancy <- ifelse(patient_data$Neoplasm %in% c("+","Y","1"), 1, 0)
    patient_data$Malignancy[is.na(patient_data$Neoplasm)] <- 0
  } else {
    patient_data$Malignancy <- 0
  }
  
  # CCI 계산
  patient_data$CCI <- patient_data$HTN + patient_data$DM + patient_data$Heart_disease +
    patient_data$Kidney_disease + patient_data$Lung_disease + patient_data$CVA +
    (patient_data$Malignancy * 2)
  
  # 사망 여부
  if ("사망일" %in% names(patient_data)) {
    patient_data$Mortality_30d <- ifelse(!is.na(patient_data$사망일) & patient_data$사망일 != "", 1, 0)
  } else {
    patient_data$Mortality_30d <- NA
  }
  
  # 입원 기간
  if (all(c("퇴원일","내원일자") %in% names(patient_data))) {
    patient_data$LOS <- tryCatch({
      discharge <- as.Date(patient_data$퇴원일, "%Y%m%d")
      admit     <- as.Date(patient_data$내원일자, "%Y%m%d")
      as.numeric(difftime(discharge, admit, units = "days"))
    }, error = function(e) { NA })
  } else {
    patient_data$LOS <- NA
  }
  
  # 진단명
  diagnosis_cols <- grep("진단", names(patient_data), value = TRUE)
  if (length(diagnosis_cols) > 0) {
    patient_data$진단명 <- patient_data[[diagnosis_cols[1]]]
    cat("사용된 진단명 컬럼:", diagnosis_cols[1], "\n")
  } else {
    patient_data$진단명 <- NA
  }
  
  # 필수 컬럼 선별
  essential_cols <- c("등록번호", "나이", "성별", "내원일자", "HTN", "DM", "Heart_disease",
                      "Kidney_disease", "Lung_disease", "CVA", "Malignancy", "CCI",
                      "Mortality_30d", "LOS", "진단명")
  available_cols <- intersect(essential_cols, names(patient_data))
  patient_clean  <- patient_data %>% select(all_of(available_cols))
  
  # CT 정보 요약
  ct_summary <- ct %>% group_by(등록번호) %>%
    summarise(
      CT_performed = 1,
      CT_count = n(),
      CT_types = paste(unique(처방명), collapse = "; "),
      .groups = "drop"
    ) %>%
    mutate(등록번호 = as.character(등록번호))
  
  if ("판독결과" %in% names(ct)) {
    ct_results <- ct %>%
      group_by(등록번호) %>%
      summarise(
        CT_results_raw = paste(판독결과, collapse = " /// "),
        .groups = "drop"
      ) %>%
      mutate(등록번호 = as.character(등록번호))
    ct_summary <- left_join(ct_summary, ct_results, by = "등록번호")
    ct_summary$CT_positive <- 0
    positive_keywords <- c("pneumonia","consolidation","infiltrat","abscess","empyema",
                           "cholecystitis","cholangitis","appendicitis","mass","tumor",
                           "malignancy","metasta")
    for (kw in positive_keywords) {
      ct_summary$CT_positive[grepl(kw, tolower(ct_summary$CT_results_raw))] <- 1
    }
  }
  
  # Lab 요약
  lab_summary <- lab %>% group_by(등록번호) %>%
    summarise(
      Lab_count = n(),
      Lab_types = n_distinct(처방명),
      .groups = "drop"
    ) %>%
    mutate(등록번호 = as.character(등록번호))
  
  # 통합
  final_data <- patient_clean %>%
    left_join(ct_summary, by="등록번호") %>%
    left_join(lab_summary, by="등록번호")
  
  # NA 처리
  final_data$CT_performed[is.na(final_data$CT_performed)] <- 0
  final_data$CT_count[is.na(final_data$CT_count)] <- 0
  final_data$Lab_count[is.na(final_data$Lab_count)] <- 0
  
  cat("데이터 전처리 완료\n")
  cat("최종 데이터:", nrow(final_data), "명\n")
  
  return(final_data)
}

################################################################################
# 4. 실행 & 저장
################################################################################
cat("\n===== 전체 실행 시작 =====\n")

# 구조 확인
data_check <- check_data_structure()

# 로드
data_list <- load_data()

# 전처리
processed_data <- preprocess_data(data_list)

# 저장
saveRDS(processed_data, file.path(data_dir, "processed_fwls_data.rds"))
write.csv(processed_data, file.path(data_dir, "processed_fwls_data.csv"), row.names = FALSE)

cat("\n저장 완료:\n- ", file.path(data_dir, "processed_fwls_data.rds"),
    "\n- ", file.path(data_dir, "processed_fwls_data.csv"), "\n")
cat("\n===== 전체 실행 완료 =====\n")
